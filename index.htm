<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <title>kidos 2025</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="benni.css" />
  <style>
    .start-hero {
      min-height: 60vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      padding: 4em 1em 2em 1em;
    }
    .start-hero h1 {
      font-size: 2.5em;
      color: var(--accent-2);
      margin-bottom: 0.3em;
    }
    .start-hero p {
      color: var(--text-light-2);
      font-size: 1.2em;
      max-width: 600px;
      margin: 0 auto 2em auto;
    }
    .start-login-btn {
      background: var(--bg-dark-2);
      color: var(--accent-2);
      border: 1px solid var(--accent-2);
      border-radius: 6px;
      font-size: 1em;
      padding: 0.35em 1.2em;
      cursor: pointer;
      box-shadow: none;
      transition: background 0.18s, color 0.18s, border 0.18s;
      margin-top: 0;
      min-width: 110px;
      white-space: nowrap;
      position: absolute;
      right: 1em;
      top: 50%;
      transform: translateY(-50%);
    }
    .start-login-btn:hover, .start-login-btn:focus {
      background: #2d3750;
      color: var(--accent-2);
      border: 1px solid var(--accent-1);
    }
    .start-footer {
      text-align: center;
      color: var(--accent-1);
      font-size: 1em;
      margin-top: 4em;
      padding-bottom: 2em;
    }
    .login-modal-bg {
      display:none;position:fixed;z-index:9999;left:0;top:0;width:100vw;height:100vh;background:rgba(0,0,0,0.7);backdrop-filter:blur(2px);
    }
    .login-modal-box {
      background:var(--bg-dark-2);color:var(--text-light-1);width:clamp(340px,90vw,420px);margin:10vh auto 0 auto;padding:2.2em 2em 1.5em 2em;border-radius:10px;box-shadow:0 4px 24px #000a;position:relative;max-width:95vw;
    }
    .login-modal-box input[type=password] {
      width:70%;padding:0.6em 1em;margin:1.2em 0 1.2em 0;border-radius:6px;border:1px solid var(--accent-2);background:var(--bg-dark-2);color:var(--text-light-1);font-size:1em;outline:none;
    }
    .login-modal-box button {
      padding:0.5em 2.2em;border-radius:6px;background:var(--accent-2);color:#fff;border:none;font-size:1em;cursor:pointer;
    }
    .login-modal-box .close-btn {
      position:absolute;top:10px;right:14px;background:none;border:none;color:var(--accent-2);font-size:1.5em;cursor:pointer;
    }
  </style>
  <style>
    .tile-bg {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0.18;
      z-index: 0;
      pointer-events: none;
      transition: opacity 0.7s, filter 0.7s;
      filter: grayscale(0.2) blur(1px) brightness(0.65) saturate(0.6);
    }
    .tile:hover .tile-bg {
      filter: grayscale(0.2) blur(1px) brightness(0.85) saturate(0.6);
    }
    .tile .tile-content {
      position: relative;
      z-index: 1;
    }
    @media (max-width: 700px) {
      .tile-section {
        grid-template-columns: 1fr !important;
      }
      .tile[style*="grid-column:1/3"] {
        grid-column: auto !important;
        max-width: unset !important;
      }
    }
  </style>
</head>
  <body>
    <header style="display:flex;align-items:center;justify-content:flex-start;padding:0;background:var(--bg-dark-1);box-shadow:0 4px 18px #0006;z-index:10;height:70px;position:relative;">
      <div class="logo" style="display:flex;align-items:center;justify-content:flex-start;height:100%;">
        <img src="gfx/logo_menu.png" alt="Kidos-logo" height="54" style="margin-bottom:0;display:block;margin-left:1.2em;margin-right:0;" />
      </div>
      <nav id="tile-menu" style="display:flex;align-items:center;gap:1.2em;margin-left:2em;font-size:1em;"></nav>
      <button class="start-login-btn" onclick="showLogin()">kidos2025 Login &rarr;</button>
    </header>
    <main style="height:calc(100vh - 160px);position:relative;">
      <div id="main-scroll-inner" class="custom-scrollbar-area" style="height:100%;overflow:auto;position:relative;">
        <section class="tile-section" style="display:grid;grid-template-columns:repeat(2,1fr);gap:2em;justify-content:center;margin:3em 0 2em 0;max-width:900px;margin-left:auto;margin-right:auto;">

<!-- ===================================================== TILE ===================================================== -->

          <div class="tile small">
            <img class="tile-bg" src="" alt="" />
            <div class="tile-content" id="tile-content-1">
              <!-- Inhalt wird per JS geladen -->
            </div>
          </div>
          <div class="tile small">
            <img class="tile-bg" src="" alt="" />
            <div class="tile-content" id="tile-content-2">
              <!-- Inhalt wird per JS geladen -->
            </div>
          </div>
          <div class="tile large">
            <img class="tile-bg" src="" alt="" />
            <div class="tile-content" id="tile-content-3">
              <!-- Inhalt wird per JS geladen -->
            </div>
          </div>
          <div class="tile large">
            <img class="tile-bg" src="" alt="" />
            <div class="tile-content" id="tile-content-4">
              <!-- Inhalt wird per JS geladen -->
            </div>
          </div>
          <div class="tile small">
            <img class="tile-bg" src="" alt="" />
            <div class="tile-content" id="tile-content-5">
              <!-- Inhalt wird per JS geladen -->
            </div>
          </div>
          <div class="tile small">
            <img class="tile-bg" src="" alt="" />
            <div class="tile-content" id="tile-content-6">
              <!-- Inhalt wird per JS geladen -->
            </div>
          </div>
        </section>
        <div id="start-login-modal" class="login-modal-bg">
          <div class="login-modal-box">
            <button onclick="closeLogin()" class="close-btn">&times;</button>
            <h2 style="margin-top:0;color:var(--accent-2);font-size:1.2em;">Login</h2>
            <p style="color:var(--text-light-2);font-size:1em;">Bitte gib das Passwort ein, um die Anwendung zu nutzen.</p>
            <input id="pw-input" type="password" placeholder="Passwort" autocomplete="current-password" onkeydown="if(event.key==='Enter'){checkPassword();}" />
            <div id="pw-error" style="color:#e55;margin-top:1em;min-height:1.5em;font-size:0.98em;"></div>
            <button onclick="checkPassword()" style="width:100%;margin-top:1.5em;">Login</button>
          </div>
        </div>
      </div>
      <div class="custom-scrollbar" id="custom-scrollbar" aria-hidden="true" style="pointer-events: none;">
        <div class="custom-scrollbar-arrow" id="scrollbar-arrow-up">&#9650;</div>
        <div class="custom-scrollbar-track" id="custom-scrollbar-track">
          <div class="custom-scrollbar-thumb" id="custom-scrollbar-thumb"></div>
        </div>
        <div class="custom-scrollbar-arrow" id="scrollbar-arrow-down">&#9660;</div>
      </div>
    </main>
    <footer class="start-footer" style="background:var(--bg-dark-1);color:var(--accent-1);height:30px;position:fixed;bottom:0;left:0;right:0;z-index:1000;display:flex;align-items:center;justify-content:center;font-size:8pt;padding:0;">
      <div id="center-content" class="footer-content" style="color: var(--accent-1);">
        © 2025 Benjamin Geisler – Alle Rechte vorbehalten -
        <a href="https://www.benjamingeisler.de/" target="_blank" rel="noopener noreferrer" style="color: var(--accent-1);">benjamingeisler.de</a>
        <span style="display:inline-block;width:1.2em;"></span>
        <a href="#impressum" onclick="document.getElementById('impressum-modal').style.display='block';return false;" style="color:var(--accent-2);text-decoration:underline;font-size:0.95em;">Impressum</a>
      </div>
    </footer>
    <!-- Impressum Modal -->
    <div id="impressum-modal" style="display:none;position:fixed;z-index:9999;left:0;top:0;width:100vw;height:100vh;background:rgba(0,0,0,0.7);backdrop-filter:blur(2px);overflow:auto;">
      <div style="background:var(--bg-dark-2);color:var(--text-light-1);width:clamp(340px,60vw,700px);margin:8vh auto 0 auto;padding:2.2em 2em 1.5em 2em;border-radius:10px;box-shadow:0 4px 24px #000a;position:relative;max-height:65vh;overflow-y:auto;overflow-x:hidden;">
        <button onclick="document.getElementById('impressum-modal').style.display='none'" style="position:sticky;top:2px;right:2px;float:right;background:none;border:none;color:var(--accent-2);font-size:1.7em;cursor:pointer;z-index:10;padding:0.1em 0.4em 0.1em 0.1em;">&times;</button>
        <h2 style="margin-top:0;font-size:1.3em;color:var(--accent-2);">Impressum</h2>
        <div style="font-size:1em;line-height:1.6;">
          <span style="display:block;font-weight:bold;font-size:1.08em;color:var(--accent-2);margin-bottom:0.2em;letter-spacing:0.01em;">Angaben gemäß § 5 TMG</span>
          Benjamin Geisler<br>
          c/o Teilhabe durch Teilgabe<br>
          Skandinavische Straße 15<br>
          10317 Berlin<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Kontakt:</span><br>
          E-Mail: kontakt@benjamingeisler.de<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV:</span><br>
          Benjamin Geisler, Anschrift wie oben<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Streitschlichtung:</span><br>
          Plattform der Europäischen Kommission zur Online-Streitbeilegung (OS) für Verbraucher: <a href="https://ec.europa.eu/consumers/odr/" target="_blank" rel="noopener noreferrer" style="color: var(--accent-1);">https://ec.europa.eu/consumers/odr/</a>. Ich bin nicht bereit und nicht verpflichtet an einem Streitbeilegungsverfahren vor einer Verbraucherschlichtungsstelle teilzunehmen.<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Haftung für Inhalte:</span><br>
          Als Diensteanbieter bin ich gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG bin ich als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werde ich diese Inhalte umgehend entfernen.<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Haftung für Links:</span><br>
          Meine Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte ich keinen Einfluss haben. Deshalb kann ich für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werde ich derartige Links umgehend entfernen.<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Mögliche Rechteverletzungen:</span><br>
          Sollte der Inhalt oder die Aufmachung dieser Seiten Rechte Dritter oder gesetzliche Bestimmungen verletzen, so bitte ich um eine entsprechende Nachricht ohne Kostennote. Ich werden die zu Recht beanstandeten Passagen bzw. Inhalte unverzüglich entfernen, ohne dass von Seiten der Beschwerdeführenden die Einschaltung eines Rechtsbeistandes erforderlich ist. Ohne vorherige Kontaktaufnahme ausgelöste Kosten, etwa durch Abmahnungen, werde ich vollumfänglich zurückweisen.<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Urheberrecht:</span><br>
          Die durch den Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitte ich um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werde ich derartige Inhalte umgehend entfernen.<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Widerspruch Werbe-Mails:</span><br>
          Der Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten zur Übersendung von nicht ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit widersprochen. Der Betreiber der Seiten behält sich ausdrücklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-E-Mails, vor.<br>
          <i>Quelle:</i> <a href="https://www.e-recht24.de/" target="_blank" rel="noopener noreferrer" style="color: var(--accent-1);">eRecht24</a>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Umsetzung der Website:</span><br>
          Umgesetzt und gestaltet wurde die Website von Benjamin Geisler. Technische Fehler oder sonstigen Feedback zur Website bitte an kontakt@benjamingeisler.de melden.<br>
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Nutzung der Kommentarfunktion:</span><br>
          Das Benutzen der Kommentarfunktion zu kommerziellen oder werblichen Zwecken ist untersagt. Außerdem behalte ich mir vor Kommentare nach eigenem Ermessen zu löschen.<br>          
          <br>
          <span style="display:block;font-weight:bold;font-size:1.05em;color:var(--accent-1);margin-top:0.7em;margin-bottom:0.1em;">Salvatorische Klausel:</span><br>
          Sollte eine Bestimmung dieser Nutzungsbedingungen unwirksam sein oder werden, bleibt die Wirksamkeit der übrigen Bestimmungen unberührt. Anstelle der unwirksamen Bestimmung tritt eine Regelung, die dem wirtschaftlichen Zweck der unwirksamen Bestimmung am nächsten kommt.<br>
          <br>
          <br>
          <i>Stand (letzte Aktualisierung): 02.07.2025</i>
        </div>
      </div>
    </div>
    <script src="app.js"></script>
    <script>
      // --- Dynamisches Menü für Kachelüberschriften ---
      function createTileMenu() {
        const menu = document.getElementById('tile-menu');
        if (!menu) return;
        // Warte, bis die Kachelüberschriften geladen sind
        setTimeout(() => {
          const tiles = document.querySelectorAll('.tile');
          menu.innerHTML = '';
          tiles.forEach((tile, i) => {
            const h2 = tile.querySelector('h2');
            if (h2) {
              // Kachel bekommt eine ID, falls nicht vorhanden
              tile.id = tile.id || 'tile-scroll-' + (i+1);
              const a = document.createElement('a');
              a.textContent = h2.textContent;
              a.href = '#'+tile.id;
              a.style.cssText = 'color:var(--accent-1);text-decoration:none;opacity:0.7;padding:0 0.2em;transition:opacity 0.18s;cursor:pointer;font-weight:400;';
              a.onmouseenter = () => a.style.opacity = '1';
              a.onmouseleave = () => a.style.opacity = '0.7';
              a.onclick = (e) => {
                e.preventDefault();
                const main = document.getElementById('main-scroll-inner');
                const rect = tile.getBoundingClientRect();
                const mainRect = main.getBoundingClientRect();
                // Scroll-Offset: Headerhöhe (70px) + etwas Abstand
                const scrollTop = main.scrollTop + rect.top - mainRect.top - 16;
                main.scrollTo({top: scrollTop, behavior: 'smooth'});
              };
              menu.appendChild(a);
            }
          });
        }, 400); // nach dem Laden der Kacheltexte
      }
      // Nach dem Laden der Kacheltexte erneut aufrufen
      document.addEventListener('DOMContentLoaded', createTileMenu);
      setTimeout(createTileMenu, 1200);
    </script>
    <script>
      // Passwort-Hash für die Anwendung
      const PASSWORT_HASH = "a87dc46c10998d49038499595ea919acf69a290eba2fa756d4e9fcb0ea10e257";
      function showLogin() {
        document.getElementById('start-login-modal').style.display = 'block';
        setTimeout(()=>{document.getElementById('pw-input').focus();}, 200);
      }
      function closeLogin() {
        document.getElementById('start-login-modal').style.display = 'none';
        document.getElementById('pw-input').value = '';
        document.getElementById('pw-error').textContent = '';
      }
      async function checkPassword() {
        const input = document.getElementById('pw-input').value;
        const errorDiv = document.getElementById('pw-error');
        const hash = await sha256(input);
        if (hash === PASSWORT_HASH) {
          window.location.href = 'kidos2025.htm';
        } else {
          errorDiv.textContent = 'Falsches Passwort!';
        }
      }
      // Hilfsfunktion: SHA-256-Hash als Hex-String berechnen
      async function sha256(str) {
        const buf = new TextEncoder().encode(str);
        const hashBuffer = await window.crypto.subtle.digest('SHA-256', buf);
        return Array.from(new Uint8Array(hashBuffer)).map(b => b.toString(16).padStart(2, '0')).join('');
      }
      // --- Zufällige dezente Hintergrundbilder für die Kacheln ---
      const tileImages = [
        'img/Bild1.jpg','img/Bild2.jpg','img/Bild3.jpg','img/Bild4.jpg','img/Bild5.jpg','img/Bild6.jpg','img/Bild7.jpg','img/Bild8.jpg','img/Bild9.jpg','img/Bild10.jpg','img/Bild11.jpg','img/Bild12.jpg','img/Bild13.jpg','img/Bild14.jpg','img/Bild15.jpg','img/Bild16.jpg','img/Bild17.jpg','img/Bild18.jpg','img/Bild19.jpg','img/Bild20.jpg','img/Bild21.jpg','img/Bild22.jpg','img/Bild23.jpg','img/Bild24.jpg','img/Bild25.jpg'
      ];
      function randomInterval() {
        // 17 bis 23 Sekunden in ms
        return 17000 + Math.floor(Math.random() * 6000);
      }
      function shuffle(arr) {
        let a = arr.slice();
        for (let i = a.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [a[i], a[j]] = [a[j], a[i]];
        }
        return a;
      }
      // Für jede Kachel ein eigenes Intervall und keine Dopplung pro Runde
      function startTileBackgroundsIndividually() {
        const tiles = document.querySelectorAll('.tile');
        let lastImages = [];
        function setAllTiles() {
          // Neue zufällige, nicht doppelte Bilder für alle Kacheln
          let imgs = shuffle(tileImages).slice(0, tiles.length);
          lastImages = imgs;
          tiles.forEach((tile, i) => setTile(tile, imgs[i]));
        }
        function setTile(tile, imgSrc) {
          const img = tile.querySelector('.tile-bg');
          if (!img) return;
          img.style.transition = 'opacity 1.2s, filter 0.7s';
          img.style.opacity = '0';
          setTimeout(() => {
            img.src = imgSrc;
            img.onload = () => {
              img.style.opacity = '0.18';
            };
          }, 600);
        }
        // Initial alle setzen
        setAllTiles();
        // Für jede Kachel eigenes Intervall starten
        tiles.forEach((tile, i) => {
          function next() {
            // Neues Bild, das aktuell in keiner anderen Kachel ist
            let available = tileImages.filter(src => !lastImages.includes(src) || lastImages[i] === src);
            // Falls alle Bilder belegt, nimm alle außer das aktuelle
            if (available.length === 0) available = tileImages.filter(src => src !== lastImages[i]);
            const imgSrc = shuffle(available)[0];
            lastImages[i] = imgSrc;
            setTile(tile, imgSrc);
            setTimeout(next, randomInterval());
          }
          setTimeout(next, randomInterval());
        });
      }
      startTileBackgroundsIndividually();

      // --- Kacheltexte aus TXT-Dateien automatisch erkennen und laden ---
      (function loadTilesAuto() {
        // Sucht txt/tile1.txt, txt/tile2.txt, ... bis keine Datei mehr existiert (404)
        let idx = 1;
        let tileFiles = [];
        function tryNext() {
          const file = `txt/tile${idx}.txt`;
          fetch(file, {cache: 'no-store'})
            .then(r => {
              if (r.ok) {
                tileFiles.push(file);
                idx++;
                tryNext();
              } else {
                // Wenn keine weitere Datei, dann laden und einfügen
                insertTiles(tileFiles);
              }
            })
            .catch(() => {
              insertTiles(tileFiles);
            });
        }
        function insertTiles(files) {
          // Hilfsfunktion: Links und E-Mails im Text erkennen und ersetzen
          function linkify(text) {
            // Zuerst Überschriften (## ...) erkennen und ersetzen
            text = text.replace(/^##\s*(.+)$/gm, function(match, heading) {
              return `\n<h3 style=\"color:var(--accent-2);font-size:1.13em;margin-top:1.2em;margin-bottom:0px;font-weight:600;letter-spacing:0.01em;\">${heading}</h3>\n`;
            });
            // E-Mail-Adressen erkennen und schützen
            const EMAIL_PLACEHOLDER = '###EMAIL###';
            let emails = [];
            text = text.replace(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g, function(email) {
              emails.push(email);
              return EMAIL_PLACEHOLDER;
            });
            // Dann URLs (http, https, www, domain.tld/...)
            text = text.replace(/(https?:\/\/[\S<]+|www\.[\S<]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:\/[\w\-._~:/?#[\]@!$&'()*+,;=]*)?)/gi, function(url) {
              let href = url;
              if (!href.match(/^(https?:\/\/|www\.)/i)) href = 'http://' + href;
              // Sichtbare Darstellung: nur Domain (ohne Pfad)
              let display = url.replace(/^https?:\/\//i, '').replace(/^www\./i, '');
              let domain = display.split('/')[0];
              display = domain;
              // Icon für externe Links (Unicode: ↗)
              let icon = '';
              try {
                let linkUrl = new URL(href, window.location.origin);
                let isExternal = linkUrl.hostname !== window.location.hostname;
                if (isExternal) {
                  icon = '<span style=\"font-size:0.98em;opacity:0.65;vertical-align:0.05em;margin-right:0.22em;\">&#8599;</span>';
                }
              } catch(e) {}
              return `${icon}<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"color:var(--accent-2);text-decoration:underline dotted;opacity:0.78;font-weight:400;transition:opacity 0.18s;\" title=\"${url}\" onmouseover=\"this.style.opacity='1'\" onmouseout=\"this.style.opacity='0.78'\">${display}</a>`;
            });
            // Platzhalter wieder durch E-Mail-Links ersetzen
            let i = 0;
            text = text.replace(new RegExp(EMAIL_PLACEHOLDER, 'g'), function() {
              const email = emails[i++];
              // E-Mail-Adresse komplett anzeigen
              let display = email;
              return `<a href=\"mailto:${email}\" style=\"color:var(--accent-2);text-decoration:underline dotted;opacity:0.78;font-weight:400;transition:opacity 0.18s;\" title=\"${email}\" onmouseover=\"this.style.opacity='1'\" onmouseout=\"this.style.opacity='0.78'\">${display}</a>`;
            });
            // Hashtags erkennen und als solche stylen
            text = text.replace(/(^|\s)(#[\wäöüÄÖÜß-]{2,})/g, function(match, space, tag) {
              const cleanTag = tag.substring(1); // ohne #
              const url = `https://www.instagram.com/explore/tags/${encodeURIComponent(cleanTag)}/`;
              return space + `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"color:var(--accent-1);background:rgba(0,0,0,0.07);border-radius:4px;padding:0.05em 0.32em 0.05em 0.22em;font-weight:500;font-size:0.98em;letter-spacing:0.01em;text-decoration:none;opacity:0.82;transition:opacity 0.18s;\" onmouseover=\"this.style.opacity='1'\" onmouseout=\"this.style.opacity='0.82'\">${tag}</a>`;
            });
            return text;
          }
          // Für jede Datei: Inhalt laden und in die Kachel einfügen
          let promises = files.map((file, i) => {
            return fetch(file, {cache: 'no-store'})
              .then(r => r.text())
              .then(text => {
                // Text verarbeiten: Links/E-Mails erkennen, Überschriften hervorheben
                text = linkify(text);
                // Kachelinhalt einfügen
                const tileContent = document.getElementById('tile-content-' + (i+1));
                if (tileContent) {
                  tileContent.innerHTML = text;
                  tileContent.style.opacity = '0';
                  // Fade-In-Animation
                  setTimeout(() => {
                    tileContent.style.transition = 'opacity 0.6s ease-out';
                    tileContent.style.opacity = '1';
                  }, 50);
                }
              });
          });
          // Warte, bis alle Dateien geladen und eingefügt sind
          Promise.all(promises).then(() => {
            // Menü neu erstellen, falls nötig
            if (document.getElementById('tile-menu').childElementCount === 0) {
              createTileMenu();
            }
          });
        }
        tryNext();
      })();
    </script>
    <script>
      // --- Kacheltexte aus TXT-Dateien automatisch erkennen und laden ---
      (function loadTilesAuto() {
        // Sucht txt/tile1.txt, txt/tile2.txt, ... bis keine Datei mehr existiert (404)
        let idx = 1;
        let tileFiles = [];
        function tryNext() {
          const file = `txt/tile${idx}.txt`;
          fetch(file, {cache: 'no-store'})
            .then(r => {
              if (r.ok) {
                tileFiles.push(file);
                idx++;
                tryNext();
              } else {
                // Wenn keine weitere Datei, dann laden und einfügen
                insertTiles(tileFiles);
              }
            })
            .catch(() => {
              insertTiles(tileFiles);
            });
        }
        function insertTiles(files) {
          // Hilfsfunktion: Links und E-Mails im Text erkennen und ersetzen
          function linkify(text) {
            // Zuerst Überschriften (## ...) erkennen und ersetzen
            text = text.replace(/^##\s*(.+)$/gm, function(match, heading) {
              return `\n<h3 style=\"color:var(--accent-2);font-size:1.13em;margin-top:1.2em;margin-bottom:0px;font-weight:600;letter-spacing:0.01em;\">${heading}</h3>\n`;
            });
            // E-Mail-Adressen erkennen und schützen
            const EMAIL_PLACEHOLDER = '###EMAIL###';
            let emails = [];
            text = text.replace(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g, function(email) {
              emails.push(email);
              return EMAIL_PLACEHOLDER;
            });
            // Dann URLs (http, https, www, domain.tld/...)
            text = text.replace(/(https?:\/\/[\S<]+|www\.[\S<]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:\/[\w\-._~:/?#[\]@!$&'()*+,;=]*)?)/gi, function(url) {
              let href = url;
              if (!href.match(/^(https?:\/\/|www\.)/i)) href = 'http://' + href;
              // Sichtbare Darstellung: nur Domain (ohne Pfad)
              let display = url.replace(/^https?:\/\//i, '').replace(/^www\./i, '');
              let domain = display.split('/')[0];
              display = domain;
              // Icon für externe Links (Unicode: ↗)
              let icon = '';
              try {
                let linkUrl = new URL(href, window.location.origin);
                let isExternal = linkUrl.hostname !== window.location.hostname;
                if (isExternal) {
                  icon = '<span style=\"font-size:0.98em;opacity:0.65;vertical-align:0.05em;margin-right:0.22em;\">&#8599;</span>';
                }
              } catch(e) {}
              return `${icon}<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"color:var(--accent-2);text-decoration:underline dotted;opacity:0.78;font-weight:400;transition:opacity 0.18s;\" title=\"${url}\" onmouseover=\"this.style.opacity='1'\" onmouseout=\"this.style.opacity='0.78'\">${display}</a>`;
            });
            // Platzhalter wieder durch E-Mail-Links ersetzen
            let i = 0;
            text = text.replace(new RegExp(EMAIL_PLACEHOLDER, 'g'), function() {
              const email = emails[i++];
              // E-Mail-Adresse komplett anzeigen
              let display = email;
              return `<a href=\"mailto:${email}\" style=\"color:var(--accent-2);text-decoration:underline dotted;opacity:0.78;font-weight:400;transition:opacity 0.18s;\" title=\"${email}\" onmouseover=\"this.style.opacity='1'\" onmouseout=\"this.style.opacity='0.78'\">${display}</a>`;
            });
            // Hashtags erkennen und als solche stylen
            text = text.replace(/(^|\s)(#[\wäöüÄÖÜß-]{2,})/g, function(match, space, tag) {
              const cleanTag = tag.substring(1); // ohne #
              const url = `https://www.instagram.com/explore/tags/${encodeURIComponent(cleanTag)}/`;
              return space + `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"color:var(--accent-1);background:rgba(0,0,0,0.07);border-radius:4px;padding:0.05em 0.32em 0.05em 0.22em;font-weight:500;font-size:0.98em;letter-spacing:0.01em;text-decoration:none;opacity:0.82;transition:opacity 0.18s;\" onmouseover=\"this.style.opacity='1'\" onmouseout=\"this.style.opacity='0.82'\">${tag}</a>`;
            });
            return text;
          }
          // Für jede Datei: Inhalt laden und in die Kachel einfügen
          files.forEach((file, i) => {
            fetch(file)
              .then(r => r.ok ? r.text() : '')
              .then(txt => {
                const lines = txt.split('\n');
                const title = lines[0] || '';
                const body = lines.slice(1).join('\n').trim();
                let html = '';
                if(title) html += `<h2 style=\"color:var(--accent-2);margin-bottom:1em;\">${linkify(title)}</h2>`;
                if(body) {
                  // Überschriften und Absätze erkennen: Nach jedem <h3> einen neuen <p> öffnen
                  let htmlBody = '';
                  let parts = body.split(/(##.+)/g);
                  parts.forEach(part => {
                    if(part.startsWith('##')) {
                      htmlBody += linkify(part) + '';
                    } else if(part.trim() !== '') {
                      // Text nach Überschrift oder zwischen Absätzen
                      htmlBody += part.split(/\n\s*\n/).map(p => `<p>${linkify(p.trim())}</p>`).join('');
                    }
                  });
                  html += htmlBody;
                }
                const el = document.getElementById('tile-content-' + (i+1));
                if (el) el.innerHTML = html;
              });
          });
        }
        tryNext();
      })();
    </script>
  </body>
</html>